import{_ as i,c as a,a0 as n,o as l}from"./chunks/framework.DL0M-SdH.js";const o=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"LeetCode/算法笔记.md","filePath":"LeetCode/算法笔记.md","lastUpdated":1730704828000}'),p={name:"LeetCode/算法笔记.md"};function e(h,s,t,k,r,d){return l(),a("div",null,s[0]||(s[0]=[n(`<h3 id="🔴-正在编写" tabindex="-1">🔴 正在编写... <a class="header-anchor" href="#🔴-正在编写" aria-label="Permalink to &quot;🔴 正在编写...&quot;">​</a></h3><h2 id="一、初识算法" tabindex="-1">一、初识算法 <a class="header-anchor" href="#一、初识算法" aria-label="Permalink to &quot;一、初识算法&quot;">​</a></h2><p>当我们听到“算法”这个词时，很自然地会想到数学。然而实际上，许多算法并不涉及复杂数学，而是更多地依赖于基本逻辑，这些逻辑在我们的日常生活中处处可见。</p><h2 id="_1-1-数据结构定义" tabindex="-1">1.1 数据结构定义 <a class="header-anchor" href="#_1-1-数据结构定义" aria-label="Permalink to &quot;1.1 数据结构定义&quot;">​</a></h2><p>数据结构(data structure)是计算机中组织和存储数据的方式，具有以下设计目标：</p><ul><li>空间占用尽量 <mark>减少</mark> ，节省计算机内存。</li><li>数据操作尽可能 <mark>快速</mark> ，涵盖数据访问、添加、删除、更新等。</li><li>提供 <mark>简洁</mark> 的数据表示和逻辑信息，以便使得算法高效运行。</li></ul><p><strong>数据结构设计是一个充满权衡的过程。</strong></p><p>如果想要在某方面取得提升，往往需要在另一方面作出妥协。下面举两个例子。</p><ul><li>链表相较于数组，在数据添加和删除操作上更加便捷，但牺牲了数据访问速度。</li><li>图相较于链表，提供了更丰富的逻辑信息，但需要占用更大的内存空间。</li></ul><h2 id="_1-2-数据结构与算法的关系" tabindex="-1">1.2 数据结构与算法的关系 <a class="header-anchor" href="#_1-2-数据结构与算法的关系" aria-label="Permalink to &quot;1.2 数据结构与算法的关系&quot;">​</a></h2><p>算法是在有限时间内解决特定问题的一组指令或操作步骤，而数据结构是计算机中组织和存储数据的方式。数据结构与算法高度相关、紧密结合，具体表现以下三个方面：</p><ul><li><strong>数据结构是算法的基石</strong>。数据结构为算法提供了结构化存储的数据，以及用于操作数据的方法。</li><li><strong>算法是数据结构发挥作用的舞台</strong>。数据结构本身仅存储数据信息，结合算法才能解决特定问题。</li><li>算法通常可以基于不同的数据结构进行实现，并往往<strong>有对应最优的数据结构</strong>，但最终执行效率可能相差很大。</li></ul><blockquote><p>值得说明的是，数据结构与算法是独立于编程语言的。在实际讨论时，我们通常会将“数据结构与算法”简称为“算法”。比如众所周知的 <code>LeetCode</code> 算法题目，实际上同时考察了数据结构和算法两方面的知识。</p></blockquote><h2 id="二、复杂度分析" tabindex="-1">二、复杂度分析 <a class="header-anchor" href="#二、复杂度分析" aria-label="Permalink to &quot;二、复杂度分析&quot;">​</a></h2><h2 id="_2-1-算法效率评估" tabindex="-1">2.1 算法效率评估 <a class="header-anchor" href="#_2-1-算法效率评估" aria-label="Permalink to &quot;2.1 算法效率评估&quot;">​</a></h2><p>在算法设计中，我们先后追求以下两个层面的目标。</p><ol><li>找到问题解法：算法需要在规定的输入范围内，可靠地求得问题的正确解。</li><li>寻求最优解法：同一个问题可能存在多种解法，我们希望找到尽可能高效的算法。</li></ol><p>也就是说，在能够解决问题的前提下，算法效率已成为衡量算法优劣的主要评价指标，它包括以下两个维度：</p><ul><li>时间效率：算法 <mark>运行速度</mark> 的快慢。</li><li>空间效率：算法 <mark>占用内存空间</mark> 的大小。</li></ul><p>简而言之，我们的目标是<strong>设计既快又省的数据结构与算法</strong>。而有效地评估算法效率至关重要，因为只有这样我们才能将各种算法进行对比，从而指导算法设计与优化过程。效率评估方法主要分为两种：<strong>实际测试、理论估算</strong>。</p><h3 id="_2-1-1-实际测试" tabindex="-1">2.1.1 实际测试 <a class="header-anchor" href="#_2-1-1-实际测试" aria-label="Permalink to &quot;2.1.1 实际测试&quot;">​</a></h3><p>忽略不计，存在难以排除测试环境的干扰因素，同时展开完整测试非常耗费资源。</p><h3 id="_2-1-2-理论估算" tabindex="-1">2.1.2 理论估算 <a class="header-anchor" href="#_2-1-2-理论估算" aria-label="Permalink to &quot;2.1.2 理论估算&quot;">​</a></h3><p>由于实际测试具有较大的局限性，我们可以考虑仅通过一些计算来评估算法的效率。这种估算方法被称为<strong>渐近复杂度分析</strong>，简称复杂度分析。它描述了随着输入数据大小的增加，算法执行所需时间和空间的增长趋势。它可以体现不同数据量下的算法效率，尤其是在大数据量下的算法性能。</p><h2 id="_2-2-迭代与递归" tabindex="-1">2.2 迭代与递归 <a class="header-anchor" href="#_2-2-迭代与递归" aria-label="Permalink to &quot;2.2 迭代与递归&quot;">​</a></h2><p>在数据结构与算法中，重复执行某个任务是很常见的，其与算法的复杂度密切相关。而要重复执行某个任务，我们通常会选用两种基本的程序结构：迭代和递归。</p><h3 id="_2-2-1-迭代" tabindex="-1">2.2.1 迭代 <a class="header-anchor" href="#_2-2-1-迭代" aria-label="Permalink to &quot;2.2.1 迭代&quot;">​</a></h3><p><strong>迭代</strong>是一种重复执行某个任务的控制结构。在迭代中，程序会<strong>在满足一定的条件下重复执行某段代码</strong>，直到这个条件不再满足。</p><ol><li><code>for</code>循环 <code>for</code> 循环是最常见的迭代形式之一，适合预先知道迭代次数时使用。 以下函数基于 <code>for</code> 循环实现了求和 1 + 2 + ⋯ + 𝑛 ，求和结果使用变量 <code>res</code> 记录。</li></ol><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* for 循环 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> forLoop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 循环求和 1, 2, ..., n-1, n</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>此求和函数的操作数量与输入数据大小 <code>𝑛</code> 成正比，或者说成“线性关系”。实际上，时间复杂度描述的就是这个“线性关系”。</p><ol start="2"><li><code>while</code>循环 与 <code>for</code> 循环类似，<code>while</code> 循环也是一种实现迭代的方法。在<code>while</code> 循环中，程序每轮都会先检查条件，如果条件为真则继续执行，否则就结束循环。下面，我们用 <code>while</code> 循环来实现求和 1 + 2 + ⋯ + 𝑛 。</li></ol><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* while 循环 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> whileLoop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 初始化条件变量</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 循环求和 1, 2, ..., n-1, n</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 更新条件变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>在 <code>while</code> 循环中，由于初始化和更新条件变量的步骤是独立在循环结构之外的，因此它<strong>比 <code>for</code> 循环的自由度更高</strong>。 总的来说，<code>for</code> 循环的代码更加紧凑，<code>while</code> 循环更加灵活，两者都可以实现迭代结构。选择使用哪一个应该根据特定问题的需求来决定。</p><ol start="3"><li>嵌套循环</li></ol><p>我们可以在一个循环结构内嵌套另一个循环结构，以 <code>for</code> 循环为例：</p><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 双层 for 循环 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nestedForLoop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 循环 i = 1, 2, ..., n-1, n</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 循环 j = 1, 2, ..., n-1, n</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n; j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`(\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}, \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">j</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}), \`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>在这种情况下，函数的操作数量与 <code>n²</code> 成正比，或者说算法运行时间和输入数据大小 <code>𝑛</code> 成“平方关系”。我们可以继续添加嵌套循环，每一次嵌套都是一次“升维”，将会使时间复杂度提高至“立方关系”、“四次方关系”、以此类推。</p><h3 id="_2-2-1-递归" tabindex="-1">2.2.1 递归 <a class="header-anchor" href="#_2-2-1-递归" aria-label="Permalink to &quot;2.2.1 递归&quot;">​</a></h3><p><strong>递归</strong>是一种算法策略，通过函数调用自身来解决问题。它主要包含两个阶段。</p><ol><li><strong>递</strong>：程序不断深入地调用自身，通常传入更小或更简化的参数，直到达到“终止条件”。</li><li><strong>归</strong>：触发“终止条件”后，程序从最深层的递归函数开始逐层返回，汇聚每一层的结果。</li></ol><p>而从实现的角度看，递归代码主要包含三个要素。</p><ol><li><strong>终止条件</strong>：用于决定什么时候由“递”转“归”。</li><li><strong>递归调用</strong>：对应“递”，函数调用自身，通常输入更小或更简化的参数。</li><li><strong>返回结果</strong>：对应“归”，将当前递归层级的结果返回至上一层。</li></ol><p>观察以下代码，我们只需调用函数 <code>recur(n)</code> ，就可以完成 <code>1 + 2 + ⋯ + 𝑛</code> 的计算：</p><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 递归 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> recur</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 终止条件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 递：递归调用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> recur</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 归：返回结果</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>虽然从计算角度看，迭代与递归可以得到相同的结果，但它们<strong>代表了两种完全不同的思考和解决问题的范式</strong>。</p><ul><li>迭代：“自下而上”地解决问题。从最基础的步骤开始，然后不断重复或累加这些步骤，直到任务完成。</li><li>递归：“自上而下”地解决问题。将原问题分解为更小的子问题，这些子问题和原问题具有相同的形式。接下来将子问题继续分解为更小的子问题，直到基本情况时停止（基本情况的解是已知的）。</li></ul><p>以上述的求和函数为例，设问题 <code>𝑓(𝑛) = 1 + 2 + ⋯ + 𝑛 </code>。</p><ul><li>迭代：在循环中模拟求和过程，从 <code>1</code> 遍历到 <code>𝑛</code> ，每轮执行求和操作，即可求得 <code>𝑓(𝑛)</code> 。</li><li>递归：将问题分解为子问题 <code>𝑓(𝑛) = 𝑛+𝑓(𝑛−1)</code> ，不断（递归地）分解下去，直至基本情况 <code>𝑓(0) = 0</code>时终止。</li></ul>`,49)]))}const c=i(p,[["render",e]]);export{o as __pageData,c as default};
