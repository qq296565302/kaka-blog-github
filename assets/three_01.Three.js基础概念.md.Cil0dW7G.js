import{_ as e,c as s,a0 as i,o as r}from"./chunks/framework.DL0M-SdH.js";const t="/kaka-blog-github/assets/axes%E5%9D%90%E6%A0%87%E8%BD%B4.DJgl60Hu.jpg",h="/kaka-blog-github/assets/cubeCamera.Ce6KHKLf.gif",n="/kaka-blog-github/assets/OrthographicCamera%E6%AD%A3%E4%BA%A4%E6%91%84%E5%83%8F%E6%9C%BA.CF68-LwX.jpg",p="/kaka-blog-github/assets/PerspectiveCamera%E9%80%8F%E8%A7%86%E6%91%84%E5%83%8F%E6%9C%BA.DR6UiHmC.jpg",l="/kaka-blog-github/assets/Geometry%E5%87%A0%E4%BD%95%E4%BD%93.BiVivdEQ.jpg",o="/kaka-blog-github/assets/Material%E6%9D%90%E8%B4%A8.BNHZlLTw.jpg",c="/kaka-blog-github/assets/DirectionalLight%E5%B9%B3%E8%A1%8C%E5%85%89%E6%BA%90.De6oa7zk.jpg",d="/kaka-blog-github/assets/HemisphereLight%E5%8D%8A%E7%90%83%E5%85%89.ChiM8Cnq.jpg",k="/kaka-blog-github/assets/PointLight%E7%82%B9%E5%85%89%E6%BA%90.BgSxvg3o.jpg",g="/kaka-blog-github/assets/SpotLight%E8%81%9A%E5%85%89%E7%81%AF%E5%85%89%E6%BA%90.BBC0YfpF.jpg",f=JSON.parse('{"title":"Three.js 的 3D 世界","description":"","frontmatter":{},"headers":[],"relativePath":"three/01.Three.js基础概念.md","filePath":"three/01.Three.js基础概念.md","lastUpdated":1730704828000}'),m={name:"three/01.Three.js基础概念.md"};function E(b,a,u,C,y,A){return r(),s("div",null,a[0]||(a[0]=[i('<h1 id="three-js-的-3d-世界" tabindex="-1">Three.js 的 3D 世界 <a class="header-anchor" href="#three-js-的-3d-世界" aria-label="Permalink to &quot;Three.js 的 3D 世界&quot;">​</a></h1><p>使用 <code>Three.js</code> 前，首先要理解以下几个核心概念：</p><h3 id="sence-场景" tabindex="-1">Sence 场景 <a class="header-anchor" href="#sence-场景" aria-label="Permalink to &quot;Sence 场景&quot;">​</a></h3><p>在 <code>Three.js</code> 中首先需要创建一个三维空间，我们称之为场景。场景可以想象成是一个容器，里面存放着所有渲染的物体和使用的光源。</p><h3 id="axes-坐标轴" tabindex="-1">Axes 坐标轴 <a class="header-anchor" href="#axes-坐标轴" aria-label="Permalink to &quot;Axes 坐标轴&quot;">​</a></h3><p><code>Three.js</code> 采用的是右手坐标系，拇指、食指、中指分别表示 X、Y、Z 轴的方向。</p><p><img src="'+t+`" alt="Axes 坐标轴"></p><h3 id="camera-摄像机" tabindex="-1">Camera 摄像机 <a class="header-anchor" href="#camera-摄像机" aria-label="Permalink to &quot;Camera 摄像机&quot;">​</a></h3><p>摄像机就相当于我们的双眼，决定了能够在场景中的所见所得。 <code>Three.js</code> 中提供以下几种摄像机类型，最为常用的是<code>PerspectiveCamera 透视摄像机</code>。</p><h5 id="arraycamera-阵列摄像机" tabindex="-1"><a href="https://threejs.org/docs/#api/zh/cameras/ArrayCamera" target="_blank" rel="noreferrer">ArrayCamera 阵列摄像机</a> <a class="header-anchor" href="#arraycamera-阵列摄像机" aria-label="Permalink to &quot;[ArrayCamera 阵列摄像机](https://threejs.org/docs/#api/zh/cameras/ArrayCamera)&quot;">​</a></h5><p>一个 <code>ArrayCamera</code> 会包含多个子摄像机，通过这一组子摄像机渲染出实际效果，适用于 <code>VR</code> 场景。本质应该是<code>shift camera</code>原理（成像平面投射偏离）的应用。<code>WebGL</code>中的<code>ArrayCamera</code>设计意图是为<code>VR</code>场景高效渲染提供支持，但是目前实际上只是提供了多子视口的渲染支持。</p><p><code>new THREE.ArrayCamera(Array)</code>：创建一组相机，其参数是一个数组，数组中的每一个值都是一个<code>THREE.Camera</code>。可用此方法使用多个相机在不同位置拍摄场景，并分屏放置画面。</p><h5 id="cubecamera-立方摄像机" tabindex="-1"><a href="https://threejs.org/docs/#api/zh/cameras/CubeCamera" target="_blank" rel="noreferrer">CubeCamera 立方摄像机</a> <a class="header-anchor" href="#cubecamera-立方摄像机" aria-label="Permalink to &quot;[CubeCamera 立方摄像机](https://threejs.org/docs/#api/zh/cameras/CubeCamera)&quot;">​</a></h5><p>创建六个 <code>PerspectiveCamera</code>（透视摄像机），适用于镜面场景。</p><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cubeCamera </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> THREE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CubeCamera</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">128</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//实例化一个cubeCamera</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">scene.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cubeCamera);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//将其添加到场景中</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dynamicEnvMaterial </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> THREE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MeshBasicMaterial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    envMap: cubeCamera.renderTarget, side: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">THREE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.DoubleSide</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//新建一个动态环境材料，envMap为环境贴图，设置为cubeCamera的渲染目标</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cubeCamera.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateCubeMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(renderer, scene);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//更新渲染立方体贴图</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><code>THREE.CubeCamera(near, far, cubeResolution)</code>总共接收三个参数，前两个参数表示最近距离和最远距离，和<code>THREE.PerspectiveCamera</code>中的<code>near</code>和<code>far</code>一个道理，最后一个参数按字面理解为立方体分辨率，通俗的理解为物体对场景反光的清晰度，即越大越清晰，可以取 128、256、512、1080 等。 <a href="https://juejin.cn/post/6989109490285019172#heading-7" target="_blank" rel="noreferrer">用<code>Three.js</code>写一个反光球：360 全景 + 镜面反射</a>实现效果如下图：</p><p><img src="`+h+'" alt="CubeCamera"></p><h5 id="stereocamera-立体相机" tabindex="-1"><a href="https://threejs.org/docs/?q=StereoCamera#api/zh/cameras/StereoCamera" target="_blank" rel="noreferrer">StereoCamera 立体相机</a> <a class="header-anchor" href="#stereocamera-立体相机" aria-label="Permalink to &quot;[StereoCamera 立体相机](https://threejs.org/docs/?q=StereoCamera#api/zh/cameras/StereoCamera)&quot;">​</a></h5><p>双透视摄像机适用于 3D 影片、视差效果。</p><h5 id="orthographiccamera-正交摄像机" tabindex="-1"><a href="https://threejs.org/docs/#api/zh/cameras/OrthographicCamera" target="_blank" rel="noreferrer">OrthographicCamera 正交摄像机</a> <a class="header-anchor" href="#orthographiccamera-正交摄像机" aria-label="Permalink to &quot;[OrthographicCamera 正交摄像机](https://threejs.org/docs/#api/zh/cameras/OrthographicCamera)&quot;">​</a></h5><p>OrthographicCamera（正交摄像机）定义了一个矩形可视区域，物体只有在这个区域内才是可见的，另外物体无论距离摄像机是远或事近，物体都会被渲染成一个大小，所以这种摄像机类型适用于 2.5D 场景（例如斜 45 度游戏）。</p><blockquote><p>正交投影，是指像空间 U 和零空间 W 相互正交子空间的投影。</p><p>在线性代数和泛函分析中，投影是从向量空间映射到自身的一种线性变换，是日常生活中“平行投影”概念的形式化和一般化。同现实中阳光将事物投影到地面上一样，投影变换将整个向量空间映射到它的其中一个子空间，并且在这个子空间中是恒等变换。</p></blockquote><p><img src="'+n+'" alt="OrthographicCamera正交摄像机"></p><h5 id="perspectivecamera-透视摄像机" tabindex="-1"><a href="https://threejs.org/docs/?q=PerspectiveCamera#api/zh/cameras/PerspectiveCamera" target="_blank" rel="noreferrer">PerspectiveCamera 透视摄像机</a> <a class="header-anchor" href="#perspectivecamera-透视摄像机" aria-label="Permalink to &quot;[PerspectiveCamera 透视摄像机](https://threejs.org/docs/?q=PerspectiveCamera#api/zh/cameras/PerspectiveCamera)&quot;">​</a></h5><p>最为常用的摄像机类型，模拟人眼的视觉，根据物体距离摄像机的距离，近大远小。默认情况下，摄像机的初始位置 X、Y、Z 都为 0，摄像机方向是从正 Z 轴向负 Z 轴看去。通过 <code>Near</code> 和 <code>Far</code> 定义最近和最远的可视距离，<code>Fov</code> 定义可视的角度。</p><blockquote><p>透视投影属于中心投影。透视投影图简称为透视图或透视，它是从某个投射中心将物体投射到单一投影面上所得到的图形。透视投影符合人们心理习惯，即离视点近的物体大，离视点远的物体小，远到极点即为消失，成为灭点。现实生活中的景物，由于观察距离及方位的不同在视觉上会引起不同的反映，这种现象就是透视现象。(摘自百度百科：<a href="https://baike.baidu.com/item/%E9%80%8F%E8%A7%86%E6%8A%95%E5%BD%B1/9995986" target="_blank" rel="noreferrer">透视投影</a>)</p></blockquote><p><img src="'+p+'" alt="PerspectiveCamera透视摄像机"></p><h3 id="mesh-网格" tabindex="-1">Mesh 网格 <a class="header-anchor" href="#mesh-网格" aria-label="Permalink to &quot;Mesh 网格&quot;">​</a></h3><p>有了场景和摄像头就可以看到 3D 场景中的物体，场景中的我们最为常用的物体称为网格。 网格由两部分组成：几何体和材质</p><h5 id="geometry-几何体" tabindex="-1">Geometry 几何体 <a class="header-anchor" href="#geometry-几何体" aria-label="Permalink to &quot;Geometry 几何体&quot;">​</a></h5><p>记录了渲染一个 3D 物体所需要的基本数据：<code>Face</code> 面、<code>Vertex</code> 顶点等信息。 例如下面这个网格是由三角形组成，组成三角形的点称为顶点，组成的三角形称为面。</p><p><img src="'+l+'" alt="Geometry几何体"></p><h5 id="material-材质" tabindex="-1">Material 材质 <a class="header-anchor" href="#material-材质" aria-label="Permalink to &quot;Material 材质&quot;">​</a></h5><p>材质就像是物体的皮肤，决定了几何体的外表。 外表的定义可以让一个物体看起来是否有镜面金属感、暗淡、纯色、或是透明与否等效果。</p><p><img src="'+o+'" alt="Material材质"></p><h3 id="light-光源" tabindex="-1">Light 光源 <a class="header-anchor" href="#light-光源" aria-label="Permalink to &quot;Light 光源&quot;">​</a></h3><p>光源相当于在密闭空间里的一盏灯，对于场景是必不可少的。</p><h5 id="ambientlight-环境光源" tabindex="-1">AmbientLight 环境光源 <a class="header-anchor" href="#ambientlight-环境光源" aria-label="Permalink to &quot;AmbientLight 环境光源&quot;">​</a></h5><p>属于基础光源，为场景中的所有物体提供一个基础亮度。 环境光会均匀的照亮场景中的所有物体。 环境光不能用来投射阴影，因为它没有方向。</p><h5 id="directionallight-平行光源" tabindex="-1">DirectionalLight 平行光源 <a class="header-anchor" href="#directionallight-平行光源" aria-label="Permalink to &quot;DirectionalLight 平行光源&quot;">​</a></h5><p>效果类似太阳光，发出的光源都是平行的。 平行光是沿着特定方向发射的光。这种光的表现像是无限远,从它发出的光线都是平行的。常常用平行光来模拟太阳光的效果; 太阳足够远，因此我们可以认为太阳的位置是无限远，所以我们认为从太阳发出的光线也都是平行的。 平行光可以投射阴影。</p><p><img src="'+c+'" alt="DirectionalLight平行光源"></p><h5 id="hemispherelight-半球光" tabindex="-1">HemisphereLight 半球光 <a class="header-anchor" href="#hemispherelight-半球光" aria-label="Permalink to &quot;HemisphereLight 半球光&quot;">​</a></h5><p>只有圆球的半边会发出光源。 光源直接放置于场景之上，光照颜色从天空光线颜色渐变到地面光线颜色。 半球光不能投射阴影。</p><p><img src="'+d+'" alt="HemisphereLight半球光"></p><h5 id="pointlight-点光源" tabindex="-1">PointLight 点光源 <a class="header-anchor" href="#pointlight-点光源" aria-label="Permalink to &quot;PointLight 点光源&quot;">​</a></h5><p>一个点向四周发出光源，一般用于灯泡。从一个点向各个方向发射的光源。一个常见的例子是模拟一个灯泡发出的光。 该光源可以投射阴影。</p><p><img src="'+k+'" alt="PointLight点光源"></p><h5 id="spotlight-聚光灯光源" tabindex="-1">SpotLight 聚光灯光源 <a class="header-anchor" href="#spotlight-聚光灯光源" aria-label="Permalink to &quot;SpotLight 聚光灯光源&quot;">​</a></h5><p>一个圆锥体的灯光。光线从一个点沿一个方向射出，随着光线照射的变远，光线圆锥体的尺寸也逐渐增大。 该光源可以投射阴影。</p><p><img src="'+g+`" alt="SpotLight聚光灯光源"></p><h3 id="shadow-阴影" tabindex="-1">Shadow 阴影 <a class="header-anchor" href="#shadow-阴影" aria-label="Permalink to &quot;Shadow 阴影&quot;">​</a></h3><p>另外要注意并不是每一种光源都能产生阴影，目前只有三种光源可以：</p><ul><li>DirectionalLight 平行光源</li><li>PointLight 点光源</li><li>SpotLight 聚光灯光源</li></ul><p>另外如果要开启模型的阴影的话，模型是由多个 <code>Mesh</code> 组成的，只开启父的 <code>Mesh</code> 的阴影是不行的，还需要遍历父 <code>Mesh</code> 下所有的子 <code>Mesh</code> 为其开启投射阴影 <code>castShadow</code> 和接收投射阴影 <code>receiveShadow</code>。</p><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 遍历子 Mesh 开启阴影</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">traverse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (child </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> THREE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Mesh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     child.castShadow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     child.receiveShadow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>`,56)]))}const q=e(m,[["render",E]]);export{f as __pageData,q as default};
