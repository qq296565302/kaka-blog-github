import{_ as i,c as a,a0 as e,o as n}from"./chunks/framework.DL0M-SdH.js";const l="/kaka-blog-github/assets/performance.B9A-CNlN.jpg",p="/kaka-blog-github/assets/console.DqDETSVI.jpg",t="/kaka-blog-github/assets/noConsole.C7LfwABb.jpg",y=JSON.parse('{"title":"用 Performance 和 Memory 监控内存泄露","description":"","frontmatter":{},"headers":[],"relativePath":"notes/用Performance和Memory监控内存泄露.md","filePath":"notes/用Performance和Memory监控内存泄露.md","lastUpdated":1730704828000}'),o={name:"notes/用Performance和Memory监控内存泄露.md"};function r(h,s,k,d,c,g){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="用-performance-和-memory-监控内存泄露" tabindex="-1">用 Performance 和 Memory 监控内存泄露 <a class="header-anchor" href="#用-performance-和-memory-监控内存泄露" aria-label="Permalink to &quot;用 Performance 和 Memory 监控内存泄露&quot;">​</a></h1><p>很多前端都喜欢用 <code>console.log </code>调试，先不谈调试效率怎么样，首先 <code>console.log</code> 有个致命的问题：会导致内存泄漏。 为什么这么说呢？ 用 Performance 和 Memory 工具分析下就知道了。</p><div class="language-HTML vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">HTML</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- Vue --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;clickHandle&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;CLICK ME&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> clickHandle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>一个按钮，点击之后创建一个数组，执行一些计算。 很常见的逻辑。 我们最后加了一个 <code>console.log</code> 打印了下这个数组。 打开控制台，点击 <code>performance</code> 下的垃圾回收按钮，手动触发一次 GC（收集垃圾）：</p><p><img src="`+l+'" alt="performance"></p><p>勾选 <code>Memory</code>，然后开始录制，点击 14 次按钮，再执行一次 GC，你会发现内存是这样的：</p><p><img src="'+p+'" alt="console"></p><p>内存占用有十四次增长，因为我们点击三次按钮的时候会创建 14 次大数组。但是最后我们手动 GC 之后并没有回落下去，也就是这个大数组没有被回收。按理来说，代码执行完，那用的内存就要被释放，然后再执行别的代码，结果这段代码执行完之后大数组依然占据着内存，这样别的代码再执行的时候可用内存就少了。</p><p>这就是发生了内存泄漏，也就是代码执行完了不释放内存的流氓行为。</p><p>有同学说，只是这么一点内存问题不大呀，反正可用内存还很多。但如果你的代码要跑很长时间，这段代码要执行很多次呢？每次执行都会占据一部分内存不释放，慢慢的内存就不够用了，甚至会导致程序崩溃。</p><p>那为啥说是 <code>console.log</code> 导致的呢？ 我们来看看不用 <code>console.log</code> 是什么样的：</p><p><img src="'+t+`" alt="noConsole"></p><p>分配了多次内存，但是 GC 后又会落下去了。这才是没有内存泄漏的好代码。</p><p>那为啥 <code>console.log</code> 会导致内存泄漏呢？ 因为控制台打印的对象，你是不是有可能展开看？那如果这个对象在内存中没有了，是不是就看不到了？ 所以有这个引用在，浏览器不会把你打印的对象的内存释放掉。</p><p>当然，也不只是 <code>console.log</code> 会导致内存泄漏，还有别的 4 种情况：</p><ul><li>定时器用完了没有清除，那每次执行都会多一个定时器的内存占用，这就是内存泄漏</li><li>元素从 <code>dom</code> 移除了，但是还有一个变量引用着他，这样的游离的 <code>dom</code> 元素也不会被回收。每执行一次代码，就会多出游离的 <code>dom</code> 元素的内存，这也是内存泄漏</li><li>闭包引用了某个变量，这个变量不会被回收，如果这样的闭包比较多，那每次执行都会多出这些被引用变量的内存占用。这样引用大对象的闭包多了之后，也会导致内存问题</li><li>全局变量，这个本来就不会被 GC，要注意全局变量的使用</li></ul><p>总之，<strong>全局变量、闭包引用的变量、被移除的 <code>dom</code> 依然被引用、定时器用完了没清除、<code>console.log</code> 都会发生代码执行完了，但是还占用着一部分内存的流氓行为，也就是内存泄漏</strong>。</p><p>注意，这里指的是使用完毕后没有回收，在使用期间的内存增长是正常的。 其实普通项目也还好，不会长期跑，但是类似大屏项目这种长期跑的，一旦有内存泄漏，一定会崩溃，只有时间长短的区别。</p><h6 id="如何通过代码查看内存大小" tabindex="-1">如何通过代码查看内存大小？ <a class="header-anchor" href="#如何通过代码查看内存大小" aria-label="Permalink to &quot;如何通过代码查看内存大小？&quot;">​</a></h6><p>通过 <code>performance.memory.totalJSHeapSize</code> 是可以拿到堆内存大小的。</p><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MB</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1024</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> memory</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> performance.memory.totalJSHeapSize;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> usagedMemory</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(memory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>string</code> 因为常量池的存在，同样的字符串只会创建一次。<code>new String</code> 的话才会在堆中创建一个对象，然后指向常量池中的字符串字面量。</p><p>此外，<code>nodejs</code> 打印的是序列化以后的对象，所以是没有内存泄漏的。</p>`,24)]))}const E=i(o,[["render",r]]);export{y as __pageData,E as default};
