import{_ as i,c as a,a0 as n,o as l}from"./chunks/framework.DL0M-SdH.js";const e="/kaka-blog-github/assets/glTF%E6%A8%A1%E5%9E%8B%E6%A0%BC%E5%BC%8F%E6%96%87%E4%BB%B6%E7%BB%84%E6%88%90.DC7UXM_4.jpg",p="/kaka-blog-github/assets/glTF%E6%A8%A1%E5%9E%8B%E6%A0%BC%E5%BC%8F%E5%AF%BC%E5%87%BA.CdWvoe2Z.jpg",c=JSON.parse('{"title":"glTF 模型格式","description":"","frontmatter":{},"headers":[],"relativePath":"three/02.glTF 模型格式.md","filePath":"three/02.glTF 模型格式.md","lastUpdated":1730704828000}'),h={name:"three/02.glTF 模型格式.md"};function t(k,s,r,d,E,o){return l(),a("div",null,s[0]||(s[0]=[n('<h1 id="gltf-模型格式" tabindex="-1">glTF 模型格式 <a class="header-anchor" href="#gltf-模型格式" aria-label="Permalink to &quot;glTF 模型格式&quot;">​</a></h1><p><code>Three.js</code> 引擎支持的格式非常的多，我们最为常见的格式有 <code>.obj</code> + <code>.mtl</code> + <code>.jpg/.png</code>，但使用这种模型格式存在一个问题，<code>.obj</code> 是静态模型，不支持动画数据存储，无法使用模型的动画，所以建议使用 <code>glTF</code> 这种模型格式。</p><h3 id="gltf-模型格式介绍" tabindex="-1"><code>glTF</code> 模型格式介绍 <a class="header-anchor" href="#gltf-模型格式介绍" aria-label="Permalink to &quot;`glTF` 模型格式介绍&quot;">​</a></h3><p>传统的 3D 模型格式的设计理念更多是针对本地离线使用，所以这类 3D 模型格式没有针对下载速度或加载速度进行优化，文件大小往往会非常的大，随着 Web 端的兴起，对文件大小更为敏感的今天，我们该尝试别的模型格式了。</p><p><code>glTF</code> 是由 Khronos Group 开发的 3D 模型文件格式，该格式的特点是最大程度的减少了 3D 模型文件的大小，提高了传输、加载以及解析 3D 模型文件的效率，并且它可扩展，可互操作。</p><p>第一版 <code>glTF 1.0</code> 于 2015 年 10 月 19 日发布，2017 年 6 月 5 日的 Web 3D 2017 大会发布了最终版本 <code>glTF 2.0</code>。</p><h3 id="gltf-模型格式文件组成" tabindex="-1"><code>glTF</code> 模型格式文件组成 <a class="header-anchor" href="#gltf-模型格式文件组成" aria-label="Permalink to &quot;`glTF` 模型格式文件组成&quot;">​</a></h3><p><img src="'+e+'" alt="glTF 模型格式文件组成"></p><h5 id="模型文件-gltf" tabindex="-1">模型文件 <code>.gltf</code> <a class="header-anchor" href="#模型文件-gltf" aria-label="Permalink to &quot;模型文件 `.gltf`&quot;">​</a></h5><p>包含场景中节点层次结构、摄像机、网格、材质以及动画等描述信息。</p><h5 id="二进制文件-bin" tabindex="-1">二进制文件 <code>.bin</code> <a class="header-anchor" href="#二进制文件-bin" aria-label="Permalink to &quot;二进制文件 `.bin`&quot;">​</a></h5><p>包含几何、动画的数据以及其他基于缓冲区的数据，<code>.bin</code> 文件可以直接加载到 GPU 的缓冲区中从而不需要额外的解析，因此能够高效传输和快速加载。</p><h5 id="材质贴图文件-png-jpg" tabindex="-1">材质贴图文件 <code>.png</code> / <code>.jpg</code> <a class="header-anchor" href="#材质贴图文件-png-jpg" aria-label="Permalink to &quot;材质贴图文件 `.png` / `.jpg`&quot;">​</a></h5><p>3D 模型做凹凸贴图或普通贴图上所使用到文件。</p><h5 id="gltf-模型格式导出" tabindex="-1"><code>glTF</code> 模型格式导出 <a class="header-anchor" href="#gltf-模型格式导出" aria-label="Permalink to &quot;`glTF` 模型格式导出&quot;">​</a></h5><p>官方在 <code>glTF</code> 格式导出上提供了多种建模软件的导出插件，比如有：</p><ul><li>3DS Max Exporter</li><li>Maya Exporter</li><li>Blender glTF 2.0 Exporter</li><li>...</li></ul><p>常用的 C4D 建模软件官方没有提供 C4D 的导出插件，所以使用 C4D 导出后再导入 Blender，通过 Blender 作为中转站导出 <code>glTF</code> 格式文件。</p><p><img src="'+p+`" alt="glTF模型格式导出"></p><p>但由于两个建模软件之间的材质并不能相通，导出后的模型文件材质效果表现不佳，这是因为 Blender 有自己的一套材质流程系统，例如有 glTF Metallic Roughness 和 glTF Specular Glossiness，需在此基础之上重新贴材质后导出解决。</p><p>另外注意的一点 Blender 的坐标系与 <code>Three.js</code> 是不同的，Blender 会将 Z 和 Y 对调位置，在导出时要选择 <code>Convert Z up to Y up</code> 进行对调。</p><h3 id="three-js-使用-gltf-模型" tabindex="-1"><code>Three.js</code> 使用 <code>glTF</code> 模型 <a class="header-anchor" href="#three-js-使用-gltf-模型" aria-label="Permalink to &quot;\`Three.js\` 使用 \`glTF\` 模型&quot;">​</a></h3><blockquote><p>目前文中给出的加载器已无法在<code>github</code>上找到，所以具体是否可行需要验证</p></blockquote><p><code>Three.js</code> 中使用 <code>glTF</code> 格式需额外引入 <code>GLTFLoader.js</code> 加载器。</p><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gltfLoader </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> THREE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gltfLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gltfLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./assets/box.gltf&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> object </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> scene.gltf </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模型对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   scene.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(object) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将模型添加到场景中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="gltf-模型动画" tabindex="-1"><code>glTF</code> 模型动画 <a class="header-anchor" href="#gltf-模型动画" aria-label="Permalink to &quot;\`glTF\` 模型动画&quot;">​</a></h3><h5 id="animation-clip-动画片段" tabindex="-1">Animation Clip 动画片段 <a class="header-anchor" href="#animation-clip-动画片段" aria-label="Permalink to &quot;Animation Clip 动画片段&quot;">​</a></h5><p>前面提到 <code>glTF</code> 模型格式支持动画，模型动画可以使用 Blender 建模软件制作，通过 Blender 提供的时间轴编辑变形动画或者骨骼动画，每个动画可以编辑为一个 Action 动作，导出后使用 <code>GLTFLoader</code> 加载到 <code>Three.js</code> 中，可以拿到一个 <code>animations</code> 数组，<code>animations</code> 里包含了模型的每个动画 Action 动作。</p><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gltfLoader </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> THREE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gltfLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mixer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gltfLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./assets/box.gltf&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> object </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> scene.gltf</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> animations </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> model.animations </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 动画数据</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (animations </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> animations.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     mixer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> THREE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AnimationMixer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(object) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 对动画进行控制</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> animations.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       mixer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clipAction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(animations[i]).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">play</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 播放所有动画</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   scene.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(object)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> delta </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clock.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDelta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mixer)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mixer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(delta) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 更新动画片段</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div>`,29)]))}const y=i(h,[["render",t]]);export{c as __pageData,y as default};
